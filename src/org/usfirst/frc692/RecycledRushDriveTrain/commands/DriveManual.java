// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycledRushDriveTrain.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc692.RecycledRushDriveTrain.Robot;
import org.usfirst.frc692.RecycledRushDriveTrain.RobotMap;

/**
 *
 */
public class  DriveManual extends Command {

    public DriveManual() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double x = Robot.oi.driveJoystick.getX();
    	double y = Robot.oi.driveJoystick.getY();
    	double rotation = Robot.oi.driveJoystick.getZ();
    	
    	//double xinvert = x * -1.0;
    	//double yinvert = y * -1.0;
    	//double zinvert = rotation * -1.0;
    	// made inverted variables just in case
    	// EV 1/16/2015
    	
    	Robot.driveTrain.takeJoystickValueDefault(x, y, rotation);
    	// takes the new values and put them in for method
    	// EV 1/16/2015
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
